package main

type Scanner struct {
	Start   int
	Current int
	Line    int
	Source  string
}

type Token struct {
	Type    TokenType
	Start   int
	Length  int
	Line    int
	Message string
}

type TokenType int

const (
	// Single-character tokens.
	TOKEN_LEFT_PAREN TokenType = iota
	TOKEN_RIGHT_PAREN
	TOKEN_LEFT_BRACE
	TOKEN_RIGHT_BRACE
	TOKEN_LEFT_BRACKET
	TOKEN_RIGHT_BRACKET
	TOKEN_COMMA
	TOKEN_DOT
	TOKEN_MINUS
	TOKEN_PLUS
	TOKEN_SEMICOLON
	TOKEN_SLASH
	TOKEN_STAR
	// One or two character tokens.
	TOKEN_BANG
	TOKEN_BANG_EQUAL
	TOKEN_EQUAL
	TOKEN_EQUAL_EQUAL
	TOKEN_GREATER
	TOKEN_GREATER_EQUAL
	TOKEN_LESS
	TOKEN_LESS_EQUAL
	// Literals.
	TOKEN_IDENTIFIER
	TOKEN_STRING
	TOKEN_NUMBER

	// Keywords.
	TOKEN_AND
	TOKEN_CLASS
	TOKEN_ELSE
	TOKEN_FALSE
	TOKEN_FOR
	TOKEN_FUN
	TOKEN_IF
	TOKEN_NIL
	TOKEN_OR
	TOKEN_PRINT
	TOKEN_RETURN
	TOKEN_SUPER
	TOKEN_THIS
	TOKEN_TRUE
	TOKEN_VAR
	TOKEN_WHILE

	TOKEN_INT_TAG
	TOKEN_FLOAT_TAG
	TOKEN_STRING_TAG
	TOKEN_STRUCT

	TOKEN_ERROR
	TOKEN_DOTDOT
	TOKEN_EOF
)

func tokenName(token TokenType) string {
	names := []string{
		"TOKEN_LEFT_PAREN",
		"TOKEN_RIGHT_PAREN",
		"TOKEN_LEFT_BRACE",
		"TOKEN_RIGHT_BRACE",
		"TOKEN_LEFT_BRACKET",
		"TOKEN_RIGHT_BRACKET",
		"TOKEN_COMMA",
		"TOKEN_DOT",
		"TOKEN_MINUS",
		"TOKEN_PLUS",
		"TOKEN_SEMICOLON",
		"TOKEN_SLASH",
		"TOKEN_STAR",
		"TOKEN_BANG",
		"TOKEN_BANG_EQUAL",
		"TOKEN_EQUAL",
		"TOKEN_EQUAL_EQUAL",
		"TOKEN_GREATER",
		"TOKEN_GREATER_EQUAL",
		"TOKEN_LESS",
		"TOKEN_LESS_EQUAL",
		"TOKEN_IDENTIFIER",
		"TOKEN_STRING",
		"TOKEN_NUMBER",

		"TOKEN_AND",
		"TOKEN_CLASS",
		"TOKEN_ELSE",
		"TOKEN_FALSE",
		"TOKEN_FOR",
		"TOKEN_FUN",
		"TOKEN_IF",
		"TOKEN_NIL",
		"TOKEN_OR",
		"TOKEN_PRINT",
		"TOKEN_RETURN",
		"TOKEN_SUPER",
		"TOKEN_THIS",
		"TOKEN_TRUE",
		"TOKEN_VAR",
		"TOKEN_WHILE",
		"TOKEN_INT_TAG",
		"TOKEN_FLOAT_TAG",
		"TOKEN_STRING_TAG",
		"TOKEN_STRUCT",
		"TOKEN_ERROR",
		"TOKEN_EOF",
	}

	if token < 0 || int(token) >= len(names) {
		return "UNKNOWN_TOKEN"
	}
	return names[token]
}
